
# validation

- name: assert all vars are set
  assert: { that: "{{ item }} != '' " }
  with_items:
  - app_name
  - temp_folder
  - clear_temp_folder
  - service_name
  - main_class
  - installation_folder
  - clear_before_install
  - server_port
  - jmx_port
  - installer_file_name
  - s3_download_url
  - launcher_file_name
  - db_connection_string
  - db_username
  # - db_password
  - application_properties
  - xml_conf
  - extra_java_options

# required dependencies

- name: install Chocolatey
  win_chocolatey:
    name: chocolatey
    state: latest

- name: disable enhanced exit codes
  win_chocolatey_feature:
    name: useEnhancedExitCodes
    state: disabled

- name: install nssm dependency
  win_chocolatey:
    name: nssm

- name: install visual c++ redistributable 2015 dependency
  win_package:
    path: https://download.microsoft.com/download/9/3/F/93FCF1E7-E6A4-478B-96E7-D4B285925B00/vc_redist.x64.exe
    product_id: '{C146EF48-4D31-3C3D-A2C5-1E91AF8A0A9B}'
    arguments:
    - /install
    - /passive
    - /norestart
  ignore_errors: yes

# set temp folder

- name: make sure temp folder exists
  win_file:
    path: "{{ temp_folder }}"
    state: directory

# install java dependency

- name: download java from s3 url
  win_get_url:
    url: "{{ java_download_url }}"
    dest: "{{ temp_folder }}\\{{ java_download_filename }}"
    timeout: "{{ download_timeout | default(60) }}"
    force: no

- name: make sure java installation folder exists
  win_file:
    path: "{{ java_installation_folder }}"
    state: directory
  become: yes

- name: unzip java file
  win_unzip:
    src: "{{ temp_folder }}\\{{ java_download_filename }}"
    dest: "{{ java_installation_folder }}"
    remote_src: yes
    creates: "{{ java_bin }}"
  become: yes

- name: make sure java is installed on the machine
  win_command: "{{ java_bin }} -version"
  register: java_test
  ignore_errors: yes

- name: fail if java is not found
  fail:
    msg: java must be accesible in path
  when: java_test.rc != 0

# download the file

- name: download zip from s3 url
  win_get_url:
    url: "{{ s3_download_url }}"
    dest: "{{ temp_folder }}\\{{ installer_file_name }}"
    timeout: "{{ download_timeout | default(60) }}"
    force: no
  when: custom_download_url == ""

- name: download zip from custom url
  win_get_url:
    url: "{{ custom_download_url }}"
    dest: "{{ temp_folder }}\\{{ installer_file_name }}"
    timeout: "{{ download_timeout | default(60) }}"
    force: no
  when: custom_download_url != ""

# stop old service

- name: stop the old service
  win_nssm:
    name: "{{ service_name }}"
    state: absent
  become: yes

# delete old installation (optional)

- name: clear old installation folder
  win_file: 
    path: "{{ installation_folder }}"
    state: absent
  when: clear_before_install == True

# unpack all the files to the installation folder

- name: make sure installation folder exists
  win_file:
    path: "{{ installation_folder }}"
    state: directory
  become: yes

- name: make sure unzip folder exists
  win_file:
    path: "{{ temp_folder }}\\{{ (installer_file_name | splitext)[0] }}"
    state: directory
  become: yes

- name: unzip the file
  win_unzip:
    src: "{{ temp_folder }}\\{{ installer_file_name }}"
    dest: "{{ temp_folder }}\\{{ (installer_file_name | splitext)[0] }}"
    remote_src: yes
    creates: "{{ temp_folder }}\\{{ (installer_file_name | splitext)[0] }}\\{{ convention }}"
  become: yes

- name: copy the file to installation folder
  win_copy:
    src: "{{ temp_folder }}\\{{ (installer_file_name | splitext)[0] }}\\{{ convention }}\\"
    dest: "{{ installation_folder }}"
    force: no
    remote_src: yes
  become: yes

- name: copy start script
  win_template:
    src: start.bat.j2
    dest: "{{ installation_folder }}\\{{ launcher_file_name }}"
  become: yes

# configure installed 

- name: update application properties file
  win_lineinfile:
    path: "{{ installation_folder }}\\conf\\application.properties"
    line: "{{ item.key }}={{ item.value }}"
    regexp: "^{{ item.key | replace('.', '\\.') }}="
  with_dict: "{{ application_properties }}"
  become: yes

- name: update xml conf
  win_lineinfile:
    state: present
    path: "{{ installation_folder }}/conf/cloudserver.conf.xml"
    line: "<{{ item.key }}>{{ item.value }}</{{ item.key }}>"
    regexp: "<{{ item.key }}>.*<\\/{{ item.key }}>"
    insertbefore:  "<\\/forwarder-configuration>"
  with_dict: "{{ xml_conf }}"
  become: yes

- name: set permissions for logs folder
  win_file:
    path: "{{ installation_folder }}\\logs"
    state: directory
  become: yes

# QUESTION should remove pairing key for cloud ?

# - name: reset pairing key
#   win_file:
#     path: "{{ installation_folder }}\\conf\\pairing.conf.xml"
#     state: absent
#   become: yes


# install hasp

- name: run hasp installer
  win_command: "{{ installation_folder }}\\bin\\haspdinst.exe -i -fi -criticalmsg"
  become: yes

# install the service

- name: create the service
  win_nssm:
    name: "{{ service_name }}"
    application: "{{ installation_folder }}\\{{ launcher_file_name }}"
    stdout_file: "{{ installation_folder }}\\logs\\server.out.log"
    stderr_file: "{{ installation_folder }}\\logs\\server.err.log"
    state: present
  become: yes
  notify:
    - start the service

# expose role output

- name: sanitize role name
  set_fact:
    sanitize_role_name: "{{ role_name | replace('-', '_') | regex_replace('([^A-Za-z0-9_])', '') | trim }}"

- name: expose role output
  set_fact:
    "{{ sanitize_role_name }}":
      server_port: "{{ server_port }}"
      jmx_port: "{{ jmx_port }}"
      installation_folder: "{{ installation_folder }}"
      configuration_file: "{{ installation_folder }}\\conf\\application.properties"
      configuration_xml_file: "{{ installation_folder }}\\conf\\cloudserver.conf.xml"
      cloud_backup_dir: "{{ cloud_backup_dir }}"
      java_bin: "{{ java_bin }}"
